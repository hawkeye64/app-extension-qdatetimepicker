{
  "type": "component",
  "props": {
    "label": {
      "type": "String",
      "desc": "A text label that will 'float' up above the input field, once the field gets focus",
      "examples": [ "Username" ]
    },
    "stack-label": {
      "type": "Boolean",
      "desc": "Label will be always shown above the field regardless of field content (if any)"
    },
    "hint": {
      "type": "String",
      "desc": "Helper (hint) text which gets placed below your wrapped form component",
      "examples": [ "Use between 3 and 12 characters" ]
    },
    "hide-hint": {
      "type": "Boolean",
      "desc": "Hide the helper (hint) text when field is not focused"
    },
    "prefix": {
      "type": "String",
      "desc": "Prefix",
      "examples": [ "Today: " ]
    },
    "suffix": {
      "type": "String",
      "desc": "Suffix",
      "examples": [ "PM", "o'clock" ]
    },
    "color": {
      "extends": "color"
    },
    "bg-color": {
      "extends": "color"
    },
    "dark": {
      "extends": "dark"
    },
    "loading": {
      "type": "Boolean",
      "desc": "Signals to the user that a process is in progress by displaying a spinner; Spinner can be customized by using the 'loading' slot."
    },
    "clearable": {
      "type": "Boolean",
      "desc": "Appends clearable icon when a value (not undefined or null) is set; When clicked, model becomes null"
    },
    "clear-icon": {
      "type": "Boolean",
      "desc": "Custom icon to use for the clear button when using along with 'clearable' prop"
    },
    "filled": {
      "type": "Boolean",
      "desc": "Use 'filled' design for the field"
    },
    "outlined": {
      "type": "Boolean",
      "desc": "Use 'outlined' design for the field"
    },
    "borderless": {
      "type": "Boolean",
      "desc": "Use 'borderless' design for the field"
    },
    "standout": {
      "type": "Boolean",
      "desc": "Use 'standout' design for the field"
    },
    "bottom-slots": {
      "type": "Boolean",
      "desc": "Enables bottom slots ('error', 'hint', 'counter')"
    },
    "counter": {
      "type": "Boolean",
      "desc": "Show an automatic counter on the bottom right"
    },
    "rounded": {
      "extends": "rounded"
    },
    "square": {
      "type": "Boolean",
      "desc": "Remove border-radius so borders are squared; Overrides 'rounded' prop"
    },
    "dense": {
      "extends": "dense"
    },
    "items-aligned": {
      "type": "Boolean",
      "desc": "Align content to match QItem"
    },
    "disable": {
      "extends": "disable"
    },
    "readonly": {
      "extends": "readonly"
    },
    "lang": {
      "type": "String",
      "desc": "Language identifier",
      "examples": [ "en", "pt" ]
    },
    "mode": {
      "type": "String",
      "desc": "Display mode ('date', 'time', 'datetime') (default: 'date')",
      "default": "date"
    },
    "format24h": {
      "type": "Boolean",
      "desc": "Show the time picker in 24 hour format. The masked value will not be affected.",
      "default": "false"
    },
    "display-value": {
      "type": [ "Boolean", "String" ],
      "desc": "If the value is 'true' or a 'function', the internal QInput will be readonly. If the value is 'true' the calendar and numeric system used to format the date will not be forced to be the gregorian calendar and latin numbers. If value is a 'string', the format function will be ignored and the 'display-value' will be used directly in the 'input' (default: 'false')",
      "default": "false"
    },
    "display-icon": {
      "type": [ "String" ],
      "desc": "The icon of the picker (default: 'access_time' when the mode is 'time', otherwise 'event')"
    },
    "landscape": {
      "type": [ "Boolean" ],
      "desc": "Show the picker in landscape mode (default: 'false')"
    },
    "today-btn": {
      "type": [ "Boolean" ],
      "desc": "Display a button that selects the current day ('date' and 'datetime' modes only) (default: 'false')"
    },
    "cover": {
      "type": [ "Boolean" ],
      "desc": "Allows the picker to cover its target. When used, the 'fit' props are no longer effective",
      "default": "true"
    },
    "fit": {
      "type": [ "Boolean" ],
      "desc": "Allows the picker to match at least the full width of its target (default: ''true' when target is 'self', otherwise 'false')"
    },
    "anchor": {
      "type": [ "String" ],
      "desc": "Two values setting the starting position or anchor point of the menu relative to its target",
      "examples": [ "top left", "top middle", "top right", "center left", "center middle", "center right", "bottom left", "bottom middle", "bottom right" ]
    },
    "target": {
      "type": [ "String" ],
      "desc": "Target Mode ('self': the picker will be opened when the input is clicked, 'icon': the picker will be opened when the icon is clicked)",
      "examples": [ "self", "icon" ],
      "default": "icon"
    },
    "calendar": {
      "type": "String",
      "desc": "Calendar Mode ('gregorian', 'persian') (default: 'gregorian')",
      "default": "gregorian"
    },
    "date-options": {
      "type": [ "Function", "Array" ],
      "desc": "A list of events to highlight on the calendar; If using a function, it receives the date as a String and must return a Boolean (matches or not)"
    },
    "time-options": {
      "type": "Function",
      "desc": "Optionally configure what time the user allowed to set"
    },
    "default-standard": {
      "type": "String",
      "desc": "Serialization standard, the property will be ignored if value isn't null ('iso', 'quasar') (eg.: 'iso': 'yyyy-MM-ddTHH:mm', 'quasar': 'yyyy/MM/dd HH:mm') (default: 'iso')",
      "default": "iso"
    }
  }
}
